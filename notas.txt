aula 1
* Composer é um gerenciador de dependências PHP.
* Ele guarda as dependências dentro do projeto.
* Se quisermos uma dependência global, devemos usar o global command.
* Um pacote sempre segue a nomenclatura: <vendor>/<name>.
* As meta-informações de uma dependência ficam salvas no arquivo composer.json.
* O comando composer init inicializa o composer.json

No vídeo anterior, ao digitar composer install a nova dependência (Symfony DomCrawler) não foi instalada. O pacote só foi buscado pelo composer ao executar composer update.
Isso se dá pelo seguinte fato: O comando composer install lê o arquivo composer.lock e instala as exatas dependências lá definidas. No nosso caso, nós já tinhamos o arquivo criado, então o composer.lock foi lido e como não havia alterações, nada foi instalado.
Já o comando composer update lê o arquivo composer.json, instala as dependências mais atuais dentro das restrições definidas e atualiza o composer.lock.
Sendo assim, em um projeto em andamento (tendo o arquivo composer.lock), para instalarmos uma nova dependência precisamos executar o composer require ou após adicionar a dependência no arquivo composer.json executar o comando composer update

O composer possui um repositório central de pacotes: https://packagist.org/
É possível configurar repositórios de outras fontes (do github, zip etc)
O pacotes guzzlehttp/guzzle serve para executar requisições HTTP de alto nível
Para instalar uma dependência (pacote) basta executar: composer require <nome do pacote>
Composer guarda as dependências e dependências transitivas na pasta vendor do projeto
O nome e versão da dependências fica salvo no arquivo composer.json
O comando require adiciona automaticamente a dependência no composer.json
O comando composer install automaticamente baixa todas as dependências do composer.lock (ou do composer.json, caso o .lock não exista ainda)
O arquivo composer.lock define todas as versões exatas instaladas
O composer já gera um arquivo autoload.php para facilitar o carregamento das dependências
Basta usar require vendor/autoload.php

Conhecemos a PSR-4 (Autoloader)
A PSR-4 define um padrão para o carregamento automático de classes
O namespace da classe tem partes:
O vendor namespace (ou namespace padrão ou namespace prefixo)
O vendor namespace fica mapeado para uma pasta do projeto dentro do arquivo composer.json
Podemos ter um sub-namespace que precisa ser representado através de pastas
Para atualizar o arquivo autoload.php baseado no composer.json, podemos rodar o comando composer dumpautoload
Para classes que não seguem o PSR-4, podemos definir um classmap dentro do composer.json
Para carregar um biblioteca de funções automaticamente, podemos adicionar uma entrada files no composer.json

instalar as dependencias com composer em produção
composer install  --no-devemos

squizlabs/php_codesniffer -> analiza o codigo pra ver esta no padrao informado
vendor/bin/phpcs --standard=PSR12 src\  -> dentro do diretorio src\ com padrao PSR12

Lista de comandos composer (composer list)
Para rodar scrips via composer criar a tag scripts, dentro coloca o nome e o comando.
ex.
"scripts": {
        "test":"phpunit tests/TestBuscadorDeCursos.php",
        "cs":"phpcs --standard=PSR12 src/",
        "phan": "phan --allow-polyfill-parser"
    }

rodando [composer phan] no terminal vai rodar "phan --allow-polyfill-parser"

rodando scripts com um comando só
criar um comando [exemplo check], como um array que chama os outros comando com um @ antes do nome do comando
ex.:
"check":[
    "@phan",
    "@cs",
    "@test"
    ]

Para adicionar descrição aos comando no composer
criar scrips-descriptions com a chave com o mesmo nome do comando e descricao no valor
ex.:
